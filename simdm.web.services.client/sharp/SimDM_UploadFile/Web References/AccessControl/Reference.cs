//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5477
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.5477.
// 
#pragma warning disable 1591

namespace SimDM_UploadFile.AccessControl {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="EDMAccessControlBinding", Namespace="http://localhost:8080/EDMWS/AccessControl")]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(EDMbaseEntity))]
    public partial class EDMAccessControlService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback versionOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteTemporaryFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback createTemporaryFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback xpxLoggingOperationCompleted;
        
        private System.Threading.SendOrPostCallback resetAllOptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback setOptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback logoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback loginOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public EDMAccessControlService() {
            this.Url = global::SimDM_UploadFile.Properties.Settings.Default.SimDM_UploadFile_AccessControl_EDMAccessControlService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event versionCompletedEventHandler versionCompleted;
        
        /// <remarks/>
        public event deleteTemporaryFileCompletedEventHandler deleteTemporaryFileCompleted;
        
        /// <remarks/>
        public event createTemporaryFileCompletedEventHandler createTemporaryFileCompleted;
        
        /// <remarks/>
        public event xpxLoggingCompletedEventHandler xpxLoggingCompleted;
        
        /// <remarks/>
        public event resetAllOptionsCompletedEventHandler resetAllOptionsCompleted;
        
        /// <remarks/>
        public event setOptionCompletedEventHandler setOptionCompleted;
        
        /// <remarks/>
        public event logoutCompletedEventHandler logoutCompleted;
        
        /// <remarks/>
        public event loginCompletedEventHandler loginCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://localhost:8080/EDMWS/AccessControl", ResponseNamespace="http://localhost:8080/EDMWS/AccessControl")]
        [return: System.Xml.Serialization.SoapElementAttribute("Response")]
        public string version(string EDMSESSIONID) {
            object[] results = this.Invoke("version", new object[] {
                        EDMSESSIONID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void versionAsync(string EDMSESSIONID) {
            this.versionAsync(EDMSESSIONID, null);
        }
        
        /// <remarks/>
        public void versionAsync(string EDMSESSIONID, object userState) {
            if ((this.versionOperationCompleted == null)) {
                this.versionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnversionOperationCompleted);
            }
            this.InvokeAsync("version", new object[] {
                        EDMSESSIONID}, this.versionOperationCompleted, userState);
        }
        
        private void OnversionOperationCompleted(object arg) {
            if ((this.versionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.versionCompleted(this, new versionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://localhost:8080/EDMWS/AccessControl", ResponseNamespace="http://localhost:8080/EDMWS/AccessControl")]
        [return: System.Xml.Serialization.SoapElementAttribute("Response")]
        public string deleteTemporaryFile(string EDMSESSIONID, fileTransferInfo FILEINFO) {
            object[] results = this.Invoke("deleteTemporaryFile", new object[] {
                        EDMSESSIONID,
                        FILEINFO});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deleteTemporaryFileAsync(string EDMSESSIONID, fileTransferInfo FILEINFO) {
            this.deleteTemporaryFileAsync(EDMSESSIONID, FILEINFO, null);
        }
        
        /// <remarks/>
        public void deleteTemporaryFileAsync(string EDMSESSIONID, fileTransferInfo FILEINFO, object userState) {
            if ((this.deleteTemporaryFileOperationCompleted == null)) {
                this.deleteTemporaryFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteTemporaryFileOperationCompleted);
            }
            this.InvokeAsync("deleteTemporaryFile", new object[] {
                        EDMSESSIONID,
                        FILEINFO}, this.deleteTemporaryFileOperationCompleted, userState);
        }
        
        private void OndeleteTemporaryFileOperationCompleted(object arg) {
            if ((this.deleteTemporaryFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteTemporaryFileCompleted(this, new deleteTemporaryFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://localhost:8080/EDMWS/AccessControl", ResponseNamespace="http://localhost:8080/EDMWS/AccessControl")]
        [return: System.Xml.Serialization.SoapElementAttribute("Response")]
        public fileTransferInfo createTemporaryFile(string EDMSESSIONID, string FILENAME, string FILETYPE, bool UPLOAD) {
            object[] results = this.Invoke("createTemporaryFile", new object[] {
                        EDMSESSIONID,
                        FILENAME,
                        FILETYPE,
                        UPLOAD});
            return ((fileTransferInfo)(results[0]));
        }
        
        /// <remarks/>
        public void createTemporaryFileAsync(string EDMSESSIONID, string FILENAME, string FILETYPE, bool UPLOAD) {
            this.createTemporaryFileAsync(EDMSESSIONID, FILENAME, FILETYPE, UPLOAD, null);
        }
        
        /// <remarks/>
        public void createTemporaryFileAsync(string EDMSESSIONID, string FILENAME, string FILETYPE, bool UPLOAD, object userState) {
            if ((this.createTemporaryFileOperationCompleted == null)) {
                this.createTemporaryFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateTemporaryFileOperationCompleted);
            }
            this.InvokeAsync("createTemporaryFile", new object[] {
                        EDMSESSIONID,
                        FILENAME,
                        FILETYPE,
                        UPLOAD}, this.createTemporaryFileOperationCompleted, userState);
        }
        
        private void OncreateTemporaryFileOperationCompleted(object arg) {
            if ((this.createTemporaryFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createTemporaryFileCompleted(this, new createTemporaryFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://localhost:8080/EDMWS/AccessControl", ResponseNamespace="http://localhost:8080/EDMWS/AccessControl")]
        [return: System.Xml.Serialization.SoapElementAttribute("Response")]
        public string xpxLogging(string EDMSESSIONID, string ACTION, string OPTION, string MAXSIZE) {
            object[] results = this.Invoke("xpxLogging", new object[] {
                        EDMSESSIONID,
                        ACTION,
                        OPTION,
                        MAXSIZE});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void xpxLoggingAsync(string EDMSESSIONID, string ACTION, string OPTION, string MAXSIZE) {
            this.xpxLoggingAsync(EDMSESSIONID, ACTION, OPTION, MAXSIZE, null);
        }
        
        /// <remarks/>
        public void xpxLoggingAsync(string EDMSESSIONID, string ACTION, string OPTION, string MAXSIZE, object userState) {
            if ((this.xpxLoggingOperationCompleted == null)) {
                this.xpxLoggingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnxpxLoggingOperationCompleted);
            }
            this.InvokeAsync("xpxLogging", new object[] {
                        EDMSESSIONID,
                        ACTION,
                        OPTION,
                        MAXSIZE}, this.xpxLoggingOperationCompleted, userState);
        }
        
        private void OnxpxLoggingOperationCompleted(object arg) {
            if ((this.xpxLoggingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.xpxLoggingCompleted(this, new xpxLoggingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://localhost:8080/EDMWS/AccessControl", ResponseNamespace="http://localhost:8080/EDMWS/AccessControl")]
        [return: System.Xml.Serialization.SoapElementAttribute("Response")]
        public string resetAllOptions(string EDMSESSIONID) {
            object[] results = this.Invoke("resetAllOptions", new object[] {
                        EDMSESSIONID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void resetAllOptionsAsync(string EDMSESSIONID) {
            this.resetAllOptionsAsync(EDMSESSIONID, null);
        }
        
        /// <remarks/>
        public void resetAllOptionsAsync(string EDMSESSIONID, object userState) {
            if ((this.resetAllOptionsOperationCompleted == null)) {
                this.resetAllOptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnresetAllOptionsOperationCompleted);
            }
            this.InvokeAsync("resetAllOptions", new object[] {
                        EDMSESSIONID}, this.resetAllOptionsOperationCompleted, userState);
        }
        
        private void OnresetAllOptionsOperationCompleted(object arg) {
            if ((this.resetAllOptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.resetAllOptionsCompleted(this, new resetAllOptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://localhost:8080/EDMWS/AccessControl", ResponseNamespace="http://localhost:8080/EDMWS/AccessControl")]
        [return: System.Xml.Serialization.SoapElementAttribute("Response")]
        public string setOption(string EDMSESSIONID, string OPTION) {
            object[] results = this.Invoke("setOption", new object[] {
                        EDMSESSIONID,
                        OPTION});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void setOptionAsync(string EDMSESSIONID, string OPTION) {
            this.setOptionAsync(EDMSESSIONID, OPTION, null);
        }
        
        /// <remarks/>
        public void setOptionAsync(string EDMSESSIONID, string OPTION, object userState) {
            if ((this.setOptionOperationCompleted == null)) {
                this.setOptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetOptionOperationCompleted);
            }
            this.InvokeAsync("setOption", new object[] {
                        EDMSESSIONID,
                        OPTION}, this.setOptionOperationCompleted, userState);
        }
        
        private void OnsetOptionOperationCompleted(object arg) {
            if ((this.setOptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setOptionCompleted(this, new setOptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://localhost:8080/EDMWS/AccessControl", ResponseNamespace="http://localhost:8080/EDMWS/AccessControl")]
        [return: System.Xml.Serialization.SoapElementAttribute("Response")]
        public string logout(string EDMSESSIONID) {
            object[] results = this.Invoke("logout", new object[] {
                        EDMSESSIONID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void logoutAsync(string EDMSESSIONID) {
            this.logoutAsync(EDMSESSIONID, null);
        }
        
        /// <remarks/>
        public void logoutAsync(string EDMSESSIONID, object userState) {
            if ((this.logoutOperationCompleted == null)) {
                this.logoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlogoutOperationCompleted);
            }
            this.InvokeAsync("logout", new object[] {
                        EDMSESSIONID}, this.logoutOperationCompleted, userState);
        }
        
        private void OnlogoutOperationCompleted(object arg) {
            if ((this.logoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.logoutCompleted(this, new logoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://localhost:8080/EDMWS/AccessControl", ResponseNamespace="http://localhost:8080/EDMWS/AccessControl")]
        [return: System.Xml.Serialization.SoapElementAttribute("Response")]
        public string login(string USER, string GROUP, string PASSWORD) {
            object[] results = this.Invoke("login", new object[] {
                        USER,
                        GROUP,
                        PASSWORD});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void loginAsync(string USER, string GROUP, string PASSWORD) {
            this.loginAsync(USER, GROUP, PASSWORD, null);
        }
        
        /// <remarks/>
        public void loginAsync(string USER, string GROUP, string PASSWORD, object userState) {
            if ((this.loginOperationCompleted == null)) {
                this.loginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnloginOperationCompleted);
            }
            this.InvokeAsync("login", new object[] {
                        USER,
                        GROUP,
                        PASSWORD}, this.loginOperationCompleted, userState);
        }
        
        private void OnloginOperationCompleted(object arg) {
            if ((this.loginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.loginCompleted(this, new loginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5476")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://epmtech.jotne.com/EDM_DUMMY_SCHEMA/EDMAccessControl")]
    public partial class fileTransferInfo : EDMbaseEntity {
        
        private string uploadOrDownloadUrlField;
        
        private string progressInfoUrlField;
        
        private string fileNameOnServerField;
        
        private string operationField;
        
        /// <remarks/>
        public string uploadOrDownloadUrl {
            get {
                return this.uploadOrDownloadUrlField;
            }
            set {
                this.uploadOrDownloadUrlField = value;
            }
        }
        
        /// <remarks/>
        public string progressInfoUrl {
            get {
                return this.progressInfoUrlField;
            }
            set {
                this.progressInfoUrlField = value;
            }
        }
        
        /// <remarks/>
        public string fileNameOnServer {
            get {
                return this.fileNameOnServerField;
            }
            set {
                this.fileNameOnServerField = value;
            }
        }
        
        /// <remarks/>
        public string operation {
            get {
                return this.operationField;
            }
            set {
                this.operationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(fileTransferInfo))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5476")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://epmtech.jotne.com/EDM_DUMMY_SCHEMA/EDMAccessControl")]
    public partial class EDMbaseEntity {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void versionCompletedEventHandler(object sender, versionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class versionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal versionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void deleteTemporaryFileCompletedEventHandler(object sender, deleteTemporaryFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteTemporaryFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteTemporaryFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void createTemporaryFileCompletedEventHandler(object sender, createTemporaryFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createTemporaryFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createTemporaryFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public fileTransferInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((fileTransferInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void xpxLoggingCompletedEventHandler(object sender, xpxLoggingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class xpxLoggingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal xpxLoggingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void resetAllOptionsCompletedEventHandler(object sender, resetAllOptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class resetAllOptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal resetAllOptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void setOptionCompletedEventHandler(object sender, setOptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setOptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setOptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void logoutCompletedEventHandler(object sender, logoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class logoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal logoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void loginCompletedEventHandler(object sender, loginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class loginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal loginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591